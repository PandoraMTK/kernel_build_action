name: GKI Kernel Build
run-name: Build Kernel ${{inputs.KERNEL_NAME}}
on:
  workflow_call:
    inputs:
      KERNEL_NAME:
        required: true
        type: string
        description: Kernel Name
      NOSKIP:
        required: true
        type: boolean
        description: Don't Skip
      KERNEL_REPO:
        required: true
        type: string
        description: Kernel Repo
      KERNEL_BRANCH:
        required: true
        type: string
        description: Kernel Branch
      VERSION:
        required: true
        type: string
        description: Version
      COMPILER_VER:
        required: true
        type: string
        description: Compiler Version
      BUILD_TYPE:
        required: true
        type: string
        default: DEBUG
        description: Build Type
      DEBUG:
        required: false
        default: false
        type: boolean
      FullLTO:
        required: true
        default: false
        type: boolean
jobs:
  build-kernel:
    name: Build Kernel ${{inputs.KERNEL_BRANCH}}
    runs-on: ubuntu-24.04
    if: ${{inputs.NOSKIP}}
    env:
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
    steps:
      - name: Clean Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 16384
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true
      - name: Install Toolchain
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
          sudo -E apt-get update
          sudo -E apt-get install --no-install-recommends -y linux-modules-extra-"$(uname -r)" \
            ccache pahole git automake flex bison build-essential zlib1g-dev make \
            libelf-dev libssl-dev openssl bc device-tree-compiler python3 python3-pip \
            python3-telethon 7zip 7zip-standalone gzip lz4 fakeroot build-essential \
            kexec-tools kernel-wedge libncurses-dev asciidoc dos2unix zstd
          sudo -E apt-get clean
          df -h
      - name: Optimize Memory Management
        run: |
          sudo -E sysctl vm.swappiness=200
          sudo -E sysctl vm.min_free_kbytes=32768
          sudo -E sysctl vm.watermark_scale_factor=100
          sudo -E sysctl vm.overcommit_memory=1
          sudo -E sysctl vm.page-cluster=0
          sudo -E modprobe zram
          echo "0" | sudo -E tee /sys/class/block/zram0/mem_limit
          echo "zstd" | sudo -E tee /sys/class/block/zram0/comp_algorithm
          echo "$(awk 'NR==1{print $2*1000}' </proc/meminfo)" | sudo -E tee /sys/class/block/zram0/disksize
          sudo -E mkswap /dev/zram0
          sudo -E swapon -p 100 /dev/zram0
          echo "Y" | sudo -E tee /sys/kernel/mm/lru_gen/enabled
          echo "1000" | sudo -E tee /sys/kernel/mm/lru_gen/min_ttl_ms
          echo "1" | sudo -E tee /sys/kernel/mm/swap/vma_ra_enabled
      - name: Setup TimeZone
        run: |
          sudo -E rm -rf /etc/localtime
          sudo -E ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
      - name: Checkout Code
        uses: actions/checkout@main
        with:
          ref: ${{github.ref_name}}
          fetch-depth: 1
      - name: Checkout Kernel Code
        uses: actions/checkout@main
        with:
          token: ${{ secrets.CI_TOKEN }}
          repository: ${{inputs.KERNEL_REPO}}
          ref: ${{inputs.KERNEL_BRANCH}}
          path: kernel_common
          fetch-depth: 1
      - name: Download Pandora Clang
        uses: robinraju/release-downloader@main
        with:
          repository: PandoraMTK/pandora-clang
          tag: ${{inputs.COMPILER_VER}}
          fileName: pandora-clang.tar.gz
          extract: true
          tarBall: false
          zipBall: false
          token: ${{ secrets.CI_TOKEN }}
      - name: Setup CCACHE key
        id: setup_ccache_key
        run: |
          CCACHE_KEY="gki_build-${{inputs.KERNEL_BRANCH}}"

          if [ "${{inputs.FullLTO}}" == true ]; then
            CCACHE_KEY="$CCACHE_KEY-flto"
          fi

          echo "ccache_key_id=$CCACHE_KEY" >> $GITHUB_OUTPUT
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@main
        with:
          key: ${{steps.setup_ccache_key.outputs.ccache_key_id}}
          max-size: 3G
          save: true
          append-timestamp: true
      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        if: ${{inputs.DEBUG}}
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true
      - name: Start Build
        id: kbuild
        run: |
          set -euo pipefail

          cd kernel_common
          bash $GITHUB_WORKSPACE/build_kernel.sh \
            "$GITHUB_WORKSPACE/pandora-clang/bin" "${{inputs.KERNEL_NAME}}" "${{inputs.VERSION}}" \
            "${{inputs.BUILD_TYPE}}" "${{github.run_id}}" "${{inputs.FullLTO}}"

          ZIPNAME="$(cat .output)"
          mv -f "$ZIPNAME.zip" "$GITHUB_WORKSPACE/$ZIPNAME.zip"
          echo "archivename=$ZIPNAME" >>$GITHUB_OUTPUT
      - name: Bot session cache
        id: bot_session_cache
        uses: actions/cache@v4
        with:
          path: tgbot.session
          key: ${{ runner.os }}-bot-session
      - name: Upload to telegram
        env:
          CHAT_ID: ${{ secrets.CHAT_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          python3 $GITHUB_WORKSPACE/tgbot.py $GITHUB_WORKSPACE/${{ steps.kbuild.outputs.archivename }}.zip
